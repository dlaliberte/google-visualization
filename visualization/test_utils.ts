/**
 * @fileoverview Utilities for tests associated with visualizations.
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import 'jasmine'; // side-effect: declare jasmine global

// tslint:disable:deprecation  The use of Const etc is deprecated.

import {
  customMatchers,
  DiffResult,
  Scuba,
  Status,
} from 'google3/testing/karma/karma_scuba_framework';
import {constHtmlToNode} from '@npm//@closure/dom/dom';
import {Const} from '@npm//@closure/string/const';
import {dirname} from '@npm//@closure/string/path';
import * as style from '@npm//@closure/style/style';

/**
 * The type of the `module` variable generated by all TypeScript files. Used
 * for generated golden names with the browser name.
 */
export interface ModuleSpec {
  id: string;
}
declare global {
  var module: ModuleSpec;
}

let scuba: Scuba;

/** Set up the Scuba client for visual tests. Do this beforeAll tests */
export function setupScuba(testModule: ModuleSpec): Scuba {
  // Compute the location of the Scuba goldens from the module name.
  // Will always be in the same directory where the testModule is located.

  const path = dirname(testModule.id);
  const goldensDir = `${path}/scuba_goldens`;

  // To include the testFileName:
  // Remove extension, including TypeScript's `.closure.js` suffix.
  // const testFileName = baseName(testModule.id).replace(/\..+/, '');
  // goldensDir += `/${testFileName}`;`

  // Create a new Scuba client
  scuba = new Scuba(goldensDir);

  // GViz's unit tests may be heavy. Also, tests with multiple scuba diffs can
  // easily hit the default timeout of 5 seconds. Raise the timeout to reduce
  // flakiness.
  jasmine.DEFAULT_TIMEOUT_INTERVAL = 30 * 1000; // 30 seconds

  // customMatcher provides `toHavePassed()` method for DiffResult
  jasmine.addMatchers(customMatchers);

  return scuba;
}

/** Set up visualization and container */
export function setupVisualization<Viz>(
  chartConstructor: new (container: Element) => Viz,
  styleObject: {[key: string]: string} = {},
  parentElement?: Element,
): Viz {
  const containerElement = setupVisualizationContainer(
    styleObject,
    parentElement,
  );
  return new chartConstructor(containerElement);
}

/** Set up wrapper and container */
export function setupChartWrapper<W>(
  wrapperConstructor: new (container: Element) => W,
  styleObject: {[key: string]: string} = {},
  parentElement?: Element,
): W {
  const containerElement = setupChartWrapperContainer(
    styleObject,
    parentElement,
  );
  return new wrapperConstructor(containerElement);
}

/** Set up wrapper and container */
export function setupControlWrapper<W>(
  wrapperConstructor: new (container: Element) => W,
  styleObject: {[key: string]: string} = {},
  parentElement?: Element,
): W {
  const containerElement = setupControlWrapperContainer(
    styleObject,
    parentElement,
  );
  return new wrapperConstructor(containerElement);
}

/** Set up dashboard and container */
export function setupDashboard<D>(
  dashboardConstructor: new (container: Element) => D,
  styleObject: {[key: string]: string} = {},
  parentElement?: Element,
): D {
  const containerElement = setupDashboardContainer(styleObject, parentElement);
  return new dashboardConstructor(containerElement);
}

/** Set up a container. Do this beforeEach test. */
export function setupContainer(
  styleObject: {[key: string]: string},
  parentElement?: Element,
  containerConst?: Const,
): Element {
  // Set background color of body, so container is visible in contrast.
  document.body.style.backgroundColor = '#E8EAED';

  // Clear out previous visualization, if any, and set up next.
  // Only clear out the container, not the whole body, because karma tests
  // add the css files in the body.
  let containerElement = document.getElementById('visualization');
  containerElement?.remove();

  const containerNode = constHtmlToNode(containerConst || Const.from(''));
  if (containerNode) {
    const parent = parentElement || document.body;
    parent.appendChild(containerNode);
  }
  containerElement = document.getElementById('visualization');
  if (!containerElement) {
    throw new Error('Unable to find visualization container');
  }

  // Transfer style properties.
  for (const [attr, value] of Object.entries(styleObject)) {
    style.setStyle(containerElement, attr, value);
  }

  return containerElement;
}

/** Set up visualization container. Do this beforeEach test. */
export function setupVisualizationContainer(
  styleObject: {[key: string]: string},
  parentElement?: Element,
  containerConst?: Const,
): Element {
  return setupContainer(
    styleObject,
    parentElement,
    containerConst ||
      Const.from(/* html */ `
          <div id="visualization" style="width: 550px; height: 340px;"></div>`),
  );
}

/** Set up visualization container. Do this beforeEach test. */
export function setupChartWrapperContainer(
  styleObject: {[key: string]: string},
  parentElement?: Element,
  containerConst?: Const,
): Element {
  return setupContainer(
    styleObject,
    parentElement,
    containerConst ||
      Const.from(/* html */ `
        <div id="visualization" style="width: 550px; height: 340px;"></div>`),
  );
}

/** Set up visualization container. Do this beforeEach test. */
export function setupControlWrapperContainer(
  styleObject: {[key: string]: string},
  parentElement?: Element,
  containerConst?: Const,
): Element {
  return setupContainer(
    styleObject,
    parentElement,
    containerConst ||
      Const.from(/* html */ `
      <div id="control" style="width: 250px; height: 50px;"></div>`),
  );
}

/** Set up dashboard container. Do this beforeEach test. */
export function setupDashboardContainer(
  styleObject: {[key: string]: string},
  parentElement?: Element,
  containerConst?: Const,
): Element {
  return setupContainer(
    styleObject,
    parentElement,
    containerConst ||
      Const.from(/* html */ `
    <div id="dashboard" style="border: 1px solid #ccc">
      <table>
        <tr>
          <td>
            <div id="control"></div>
          </td>
        </tr>
        <tr>
          <td>
            <div id="visualization"></div>
          </td>
        </tr>
      </table>
    </div>`),
  );
}

/**
 * Capture and verify a screenshot of the given element or the #visualization.
 */
export async function diffElement(name: string, cssSelector: string) {
  if (!scuba) {
    throw new Error(
      'Scuba not configured. Call setupScuba(module) in beforeAll().',
    );
  }

  const result: DiffResult = await scuba.diffElement(name, cssSelector);

  expect(result.resultType)
    .withContext(`Screenshot result for ${name}`)
    .toBe(Status.PASSED);
}

/**
 * Capture and verify a screenshot of the given element or the #visualization.
 */
export async function diffVisElement(
  name: string,
  cssSelector = '#visualization',
) {
  await diffElement(name, cssSelector);
}

/**
 * Capture and verify a screenshot of the given element or the #dashboard.
 */
export async function diffDashboardElement(
  name: string,
  cssSelector = '#dashboard',
) {
  await diffElement(name, cssSelector);
}
